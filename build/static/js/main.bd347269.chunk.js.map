{"version":3,"sources":["components/articles.js","components/videos.js","components/latest.js","App.js","serviceWorker.js","index.js"],"names":["Articles","props","data","content","comments","articles","filter","item","contentType","console","log","result","forEach","article","index","comment","id","contentId","publishTime","Date","metadata","publishDate","year","getFullYear","date","getDate","month","getMonth","hours","getHours","minutes","getMinutes","slice","push","react_default","a","createElement","className","key","src","thumbnails","url","alt","count","headline","Fragment","Videos","videos","video","duration","durationMinutes","Math","floor","durationSeconds","height","width","description","Latest","dataItem","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","event","setState","tabs","target","value","state","axios","get","params","then","res","_this2","ids","map","catch","err","tab","components_articles","components_videos","latest","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bd347269.chunk.js","sourcesContent":["import React from 'react';\n\nconst Articles = (props) => {\n  // console.log(this.props);\n  // Object destructuring\n  const {data: {data}} = props.content;\n  // console.log(data);\n  const comments = props.comments;\n\n  // Filter out articles\n  const articles = data.filter((item) => item.contentType === 'article');\n  // articles = articles.sort((a, b) => {return a.metadata.publishDate - b.metadata.publishDate})\n  console.log(articles);\n\n  // Get article images\n  const result = [];\n\n  articles.forEach((article, index) => {\n    const comment = comments.data.content.filter((item) => item.id === article.contentId);\n    // Time stamp\n    const publishTime = new Date(article.metadata.publishDate);\n    const year = publishTime.getFullYear();\n    const date = publishTime.getDate();\n    const month = publishTime.getMonth() + 1;\n    let hours = publishTime.getHours();\n    let minutes = publishTime.getMinutes();\n    console.log(date);\n    console.log(month);\n    hours = ('0' + hours).slice(-2);\n    minutes = ('0' + minutes).slice(-2);\n\n    // Get 1 image\n    result.push(\n        <div className='flex border border-solid border-t-0 border-l-0 border-r-0 p-3' key={index}>\n          <img src={article.thumbnails[0].url} alt='not found' key={index}/>\n\n          <div className='flex flex-col ml-5'>\n            <div className='text-red font-bold'>\n              <label>{hours}:{minutes} {month}/{date}/{year}</label>\n              <span className='fa-stack fa-1x'>\n                <i className=\"fas fa-comment text-red fa-stack-1x\"></i>\n                <i className=\"fas fa-comment text-white fa-stack-1x fa-xs\"></i>\n              </span>\n              <label>{comment[0].count}</label>\n            </div>\n            <h3 className='hover:text-purple hover:underline'>{article.metadata.headline}</h3>\n          </div>\n        </div>\n    );\n  });\n\n  return (\n    <React.Fragment>{result}</React.Fragment>\n  );\n};\n\nexport default Articles;\n","import React from 'react';\n\nconst Videos = (props) => {\n  // console.log(this.props);\n  // Object destructuring\n  const {data: {data}} = props.content;\n  // console.log(data);\n  const comments = props.comments;\n\n  // Filter out videos\n  const videos = data.filter((item) => item.contentType === 'video');\n\n  const result = [];\n  videos.forEach((video, index) => {\n    const comment = comments.data.content.filter((item) => item.id === video.contentId);\n    // Time stamp\n    const publishTime = new Date(video.metadata.publishDate);\n    const year = publishTime.getFullYear();\n    const date = publishTime.getDate();\n    const month = publishTime.getMonth() + 1;\n    let hours = publishTime.getHours();\n    let minutes = publishTime.getMinutes();\n    hours = ('0' + hours).slice(-2);\n    minutes = ('0' + minutes).slice(-2);\n\n    // Video duration\n    const {duration} = video.metadata;\n    const durationMinutes = Math.floor(duration/60);\n    let durationSeconds = duration % 60;\n    if (durationSeconds < 10) durationSeconds = '0' + durationSeconds;\n\n    result.push(\n        <div className='flex border border-solid border-t-0 border-l-0 border-r-0 p-3' key={index}>\n          <div className='flex flex-no-shrink'>\n            <div className='z-10 self-end flex absolute w-24 h-8 border border-red rounded bg-red text-white justify-center items-center'>\n              <i className=\"fab fa-youtube mr-2\"></i>\n              <span>{durationMinutes}:{durationSeconds}</span>\n            </div>\n            <img className='' src={video.thumbnails[0].url} height={video.thumbnails[0].height} width={video.thumbnails[0].width} alt='not found' key={index}/>\n          </div>\n\n\n          <div className='flex flex-col ml-5'>\n            <div className='text-red font-bold'>\n              <label>{hours}:{minutes} {month}/{date}/{year}</label>\n              <span className='fa-stack fa-1x'>\n                <i className=\"fas fa-comment text-red fa-stack-1x\"></i>\n                <i className=\"fas fa-comment text-white fa-stack-1x fa-xs\"></i>\n              </span>\n              <label className=''>{comment[0].count}</label>\n            </div>\n            <h3 className='hover:text-purple hover:underline'>{video.metadata.description}</h3>\n          </div>\n        </div>\n    );\n  });\n\n  return (\n    <React.Fragment>{result}</React.Fragment>\n  );\n};\n\nexport default Videos;\n","import React from 'react';\n\nconst Latest = (props) => {\n  // console.log(this.props);\n  // Object destructuring\n  const {data: {data}} = props.content;\n  // console.log(data);\n  const comments = props.comments;\n\n  const result = [];\n  data.forEach((dataItem, index) => {\n    const comment = comments.data.content.filter((item) => item.id === dataItem.contentId);\n    const publishTime = new Date(dataItem.metadata.publishDate);\n    const year = publishTime.getFullYear();\n    const date = publishTime.getDate();\n    const month = publishTime.getMonth() + 1;\n    let hours = publishTime.getHours();\n    let minutes = publishTime.getMinutes();\n    hours = ('0' + hours).slice(-2);\n    minutes = ('0' + minutes).slice(-2);\n\n    if (dataItem.contentType === 'article') {\n      result.push(\n          <div className='flex border border-solid border-t-0 border-l-0 border-r-0 p-3' key={index}>\n\n            <img className='' src={dataItem.thumbnails[0].url} alt='not found' key={index}/>\n\n            <div className='flex flex-col ml-5'>\n              <div className='text-red font-bold'>\n                <label>{hours}:{minutes} {month}/{date}/{year}</label>\n                <span className='fa-stack fa-1x'>\n                  <i className=\"fas fa-comment text-red fa-stack-1x\"></i>\n                  <i className=\"fas fa-comment text-white fa-stack-1x fa-xs\"></i>\n                </span>\n                <label>{comment[0].count}</label>\n              </div>\n              <h3 className='hover:text-purple hover:underline'>{dataItem.metadata.description}</h3>\n            </div>\n          </div>\n      );\n    } else if (dataItem.contentType === 'video') {\n      // Video duration\n      const {duration} = dataItem.metadata;\n      const durationMinutes = Math.floor(duration/60);\n      let durationSeconds = duration % 60;\n      if (durationSeconds < 10) durationSeconds = '0' + durationSeconds;\n\n      result.push(\n          <div className='flex border border-solid border-t-0 border-l-0 border-r-0 p-3' key={index}>\n            <div className='flex flex-no-shrink'>\n              <div className='z-10 self-end flex absolute w-24 h-8 border border-red rounded bg-red text-white justify-center items-center'>\n                <i className=\"fab fa-youtube mr-2\"></i>\n                <span>{durationMinutes}:{durationSeconds}</span>\n              </div>\n              <img className='' src={dataItem.thumbnails[0].url} height={dataItem.thumbnails[0].height} width={dataItem.thumbnails[0].width} alt='not found' key={index}/>\n            </div>\n\n\n            <div className='flex flex-col ml-5'>\n              <div className='text-red font-bold'>\n                <label>{hours}:{minutes} {month}/{date}/{year}</label>\n                <span className='fa-stack fa-1x'>\n                  <i className=\"fas fa-comment text-red fa-stack-1x\"></i>\n                  <i className=\"fas fa-comment text-white fa-stack-1x fa-xs\"></i>\n                </span>\n                <label className=''>{comment[0].count}</label>\n              </div>\n              <h3 className='hover:text-purple hover:underline'>{dataItem.metadata.description}</h3>\n            </div>\n          </div>\n      );\n    }\n  });\n\n  return (\n    <React.Fragment>{result}</React.Fragment>\n  );\n};\n\nexport default Latest;\n","import React, { Component } from 'react';\r\nimport axios from 'axios'\r\nimport './App.css';\r\nimport './tailwind.css';\r\n\r\nimport Articles from './components/articles'\r\nimport Videos from './components/videos'\r\nimport Latest from './components/latest'\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      content: [],\r\n      comments: [],\r\n      tabs: ''\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    // Get content from API\r\n    await axios.get('https://cors-anywhere.herokuapp.com/https://ign-apis.herokuapp.com/content', {params: {count: 20}})\r\n      .then((res) => {\r\n        console.log('contents', res);\r\n        this.setState({content: res})\r\n      })\r\n\r\n    // Extract data field from content.\r\n    const {data: {data}} = this.state.content\r\n    // Get ids of content to get comments for each post.\r\n    const ids = data.map((item) => {\r\n      return item.contentId\r\n    })\r\n    console.log(ids);\r\n\r\n    // Get comment for each post using their id.\r\n    await axios.get('https://cors-anywhere.herokuapp.com/https://ign-apis.herokuapp.com/comments', {params: { ids } })  // Object literal\r\n      .then(res => {\r\n        console.log(`comments`, res);\r\n        this.setState({comments: res})\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })\r\n  }\r\n\r\n  handleClick = (event) => {\r\n    this.setState({\r\n      tabs: event.target.value\r\n    })\r\n  }\r\n\r\n  render() {\r\n    // conditionally render tabs\r\n    let tab;\r\n    switch (this.state.tabs) {\r\n      case 'article':\r\n        tab = <Articles content={this.state.content} comments={this.state.comments} />\r\n        break;\r\n      case 'videos':\r\n        tab = <Videos content={this.state.content} comments={this.state.comments} />\r\n        break;\r\n      case 'latest':\r\n        tab = <Latest content={this.state.content} comments={this.state.comments} />\r\n        break;\r\n      default:\r\n    }\r\n\r\n    return (\r\n      <div className='container mx-auto'>\r\n        <h1 className='heading'>Latest News</h1>\r\n        <div className='flex lg:flex-row flex-col'>\r\n          <div className='tabs-group'>\r\n            <button className='btn tabs'\r\n              onClick={this.handleClick} value='latest'>\r\n              <i className=\"fas fa-check-circle text-grey\"></i><span>&nbsp;&nbsp;&nbsp;</span>\r\n              Latest</button>\r\n\r\n            <button className='btn tabs'\r\n              onClick={this.handleClick} value='videos'>\r\n              <i className=\"fas fa-play text-grey\"></i><span>&nbsp;&nbsp;&nbsp;</span>\r\n              Videos</button>\r\n\r\n            <button className='btn tabs'\r\n              onClick={this.handleClick} value='article'>\r\n              <i className=\"fas fa-file-alt text-grey\"></i><span>&nbsp;&nbsp;&nbsp;</span>\r\n              Article</button>\r\n          </div>\r\n          <div>{tab}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}